{
    "contents" : "## CDS Pricing based on CreditGrade model\n## Author: Ming Tian\n## Date: 2015-03-25\n## Copyright @2015 Ming Tian\n\n#write a function to handel the data input\nCDS.model <- function(ticker, dir, startdate, enddate, L_bar, lamda, R, Time){\n  \n  #load the libraries\n  library(quantmod)\n  \n  #download the stock price\n  stock <- getSymbols(ticker, from = \"1996-09-01\", to = \"2015-01-01\", auto.assign= FALSE)\n  stock_close <- stock[,4]\n  names(stock_close) <- \"sclose\"\n  stock_return <- (stock_close - lag(stock_close))/lag(stock_close)\n  stock_return[1] <- as.numeric(stock_return[2])\n  names(stock_return) <- \"sreturn\"\n  \n  #down risk-free rate data\n  rf <- getSymbols(\"DGS5\", src = \"FRED\", auto.assign = FALSE)\n  rf <- rf * 0.01\n  rf <- rf[\"1996-09-01/2015-01-01\"]\n  rf <- rf[!is.na(rf)]\n  names(rf) <- \"rf\"\n  \n  #load the debt data from WRDS csv file and to compute the debt per share\n  dir_temp <- paste(dir, \"/compstat.csv\", sep=\"\")\n  compstat <- read.csv(file = dir_temp)\n  rm(dir_temp)\n  #if \n  if(!(ticker %in% compstat$tic)){\n    stopmassage <- paste(\"Can not find\", ticker, \"in compstat.csv file, \n                         please try another ticker or update the compstat.csv file from WRDS\",\n                         sep=\"\")\n    stop(stopmassage)\n  }\n  else{\n    bls <- compstat[which(compstat$tic==ticker),]\n    bls$dps <- bls$ltq / bls$cshoq\n    bls$date <- NA\n    for(i in 1:length(bls[,1])){\n      qdate <- as.character(bls$datafqtr[i])\n      y=substring(qdate,1,4)\n      q=substring(qdate,6,6)\n      if(q==\"1\"){\n        m=\"02\"\n        d=\"01\"\n      }\n      if(q==\"2\"){\n        m=\"05\"\n        d=\"01\"\n      }\n      if(q==\"3\"){\n        m=\"08\"\n        d=\"01\"\n      }\n      if(q==\"4\"){\n        m=\"11\"\n        d=\"01\"\n      }\n      temp_date <- paste(y, \"-\", m, \"-\", d, sep=\"\")\n      bls$date[i] <- temp_date\n    }\n    dps <- as.xts(bls$dps, order.by = as.Date(bls$date))\n    names(dps) <- \"dps\"\n  }\n  \n  #merge the data and convert debt data to daily\n  data <- merge(stock_close, rf, dps, stock_return)\n  data <- data[\"1996-09-01/2015-01-01\"]\n  data <- data[!is.na(data$sclose)]\n  data <- data[!is.na(data$rf)]\n  data$rf <- na.locf(data$rf)\n  #if\n  NonNAindex <- which(!is.na(data$dps))\n  firstNonNA <- min(NonNAindex)\n  if(is.na(data$dps[firstNonNA])){\n    stop(\"dps data at first date is missing, please fix this problem!\")\n  }\n  else{\n    data$dps[1] = data$dps[firstNonNA]\n    for(i in 2:length(data[,1])){\n      if(is.na(data[i,3])){\n        data[i,3] <- data[i-1,3]\n      }\n    }\n  }\n  \n  #calculate the sigma using 1000 last day simple standard deviation\n  data$sigma <- NA\n  for(i in 253:length(data[,1])){\n    data$sigma[i] <- sqrt(252) * sd(data$sreturn[(i-252):i])\n  }\n  data <- data[253:length(data[,1])]\n  \n  #choose the duration compared to the market data\n  data$CDS_model <- NA\n  data$CDS_delta <- NA\n  duration <- paste(startdate, \"/\", enddate, sep=\"\")\n  data <- data[duration]\n  \n  ################### CreditGrades Model Part #############################\n  ##Capital Structure Arbitrage Team Project\n  ##R code for CreditGrades Model\n  ##Copyright @2015 Ming Tian\n  \n  ##Introduction: This document is a implementation of CreditGrades model in R\n  \n  #   ##Function1 Default Barrier, LD\n  #   LD <- function(L_bar, D, lamda, n){\n  #     #calculation\n  #     temp <- L_bar * D * exp(lamda*rnorm(n) - 0.5*(lamda^2))\n  #     #return result\n  #     return(temp)\n  #   }\n  #   \n  ##Function2 Survival Probability, q(t)\n  q_t <- function(L_bar, D, lamda, S_0, S_t, sigma_St, t){\n    #calculation\n    d <- (S_0+L_bar*D)*exp(lamda^2)/(L_bar*D)\n    A_t <- sqrt((sigma_St*S_t/(S_t+L_bar*D))^2 * t + lamda^2)\n    temp <- pnorm((-A_t/2) + log(d)/A_t) - d*pnorm((-A_t/2) - log(d)/A_t)\n    #return result\n    return(temp)\n  }\n  \n  ##Function3 G(u)\n  ##this is just a function used in CDS spread calculation\n  G <- function(L_bar, D, lamda, sigma_St, r, u, S_0, S_t){\n    #Calculation\n    d <- (S_0+L_bar*D)*exp(lamda^2)/(L_bar*D)\n    sigma_At <- sigma_St*S_t/(S_t+L_bar*D)\n    z <- sqrt(1/4 + 2*r/sigma_At^2)\n    temp <- d^(z+1/2) * pnorm(-(log(d)/(sigma_At*sqrt(u)))-z*sigma_At*sqrt(u)) + \n      d^(-z+1/2) * pnorm(-(log(d)/(sigma_At*sqrt(u)))+z*sigma_At*sqrt(u))\n    #Return result\n    return(temp)\n  }\n  \n  ##Function4 CDS spread for maturity T, CDS_0T\n  CDS_0T <- function(L_bar, D, lamda, S_0, S_t, sigma_At, r, R, t, endt){\n    #calculation\n    q_0 <- q_t(L_bar, D, lamda, S_0, S_t, sigma_At, t)\n    q_T <- q_t(L_bar, D, lamda, S_0, S_t, sigma_At, endt)\n    sigma_At <- sigma_St*S_t/(S_t+L_bar*D)\n    epsl <- lamda^2 / sigma_At^2\n    H_T <- exp(r*epsl) * (G(L_bar, D, lamda, sigma_At, r, endt+epsl, S_0, S_t) - \n                            G(L_bar, D, lamda, sigma_At, r, epsl, S_0, S_t))\n    temp <- r * (1-R) * (1-q_0+H_T)/(q_0-q_T*exp(-r*endt)-H_T)\n    #return result\n    return(temp*(10000))\n  }\n  \n  ##Function5 CDS delta hedge ratio\n  CDS_Delta <- function(L_bar, D, lamda, S_0, S_t, sigma_At, r, R, t, endt){\n    #calculation\n    q_0 <- q_t(L_bar, D, lamda, S_0, S_t, sigma_At, t)\n    q_T <- q_t(L_bar, D, lamda, S_0, S_t, sigma_At, endt)\n    sigma_At <- sigma_St*S_t/(S_t+L_bar*D)\n    epsl <- lamda^2 / sigma_At^2\n    H_T <- exp(r*epsl) * (G(L_bar, D, lamda, sigma_At, r, endt+epsl, S_0, S_t) - \n                            G(L_bar, D, lamda, sigma_At, r, epsl, S_0, S_t))\n    CDS_diff <- (CDS_0T(L_bar, D, lamda, S_0, S_t*1.01, sigma_At, r, R, t, endt) - \n                   CDS_0T(L_bar, D, lamda, S_0, S_t, sigma_At, r, R, t, endt))\n    temp <- CDS_diff/(0.01*S_t)\n    #return result\n    return(temp)\n  }\n  \n  #   ##Function5 CDS contact value\n  #   pi_0T <- function(L_bar, D, lamda, S_0, S_t, sigma_At, r, R, t, endt){\n  #     #calculation\n  #     c_ini <- CDS_0T(L_bar, D, lamda, S_0, S_t, sigma_At, r, R, 0, endt)\n  #     c_t <- CDS_0T(L_bar, D, lamda, S_0, S_t, sigma_At, r, R, t, endt)\n  #     q_0 <- q_t(L_bar, D, lamda, S_0, S_t, sigma_At, t)\n  #     q_T <- q_t(L_bar, D, lamda, S_0, S_t, sigma_At, endt)\n  #     sigma_At <- sigma_St*S_t/(S_t+L_bar*D)\n  #     epsl <- lamda^2 / sigma_At^2\n  #     H_T <- exp(r*epsl) * (G(L_bar, D, lamda, sigma_At, r, endt+epsl) - \n  #                             G(L_bar, D, lamda, sigma_At, r, epsl))\n  #     temp <- (c_t - c_ini) / r * (q_0 - q_T*exp(-r*endt) - H_T)\n  #     #return result\n  #     return(temp)\n  #   }\n  \n  \n  ################### The Model part end here #############################\n  \n  #compute the therotical CDS spread from the CreditGrades model\n  #S_0 <- as.numeric(data$sclose[1])\n  S_change <- as.numeric(data$sclose[1])\n  S_0 <- S_change\n  i=1\n  D <- as.numeric(data$dps[i])\n  S_t <- as.numeric(data$sclose[i])\n  sigma_St <- as.numeric(data$sigma[i])\n  r <- as.numeric(data$rf[i])\n  endt <- Time\n  data$CDS_model[i] <- CDS_0T(L_bar, D, lamda, S_0, S_t, sigma_St, r, R, 1/252, endt)\n  data$CDS_delta[i] <- CDS_Delta(L_bar, D, lamda, S_0, S_t, sigma_St, r, R, 1/252, endt)\n  for(i in 2:length(data[,1])){\n    D <- as.numeric(data$dps[i])\n    if(D==as.numeric(data$dps[i-1])){\n      S_0=S_change\n    }\n    else{\n      S_change=as.numeric(data$sclose[i])\n      S_0=S_change\n    }\n    S_t <- as.numeric(data$sclose[i])\n    sigma_St <- as.numeric(data$sigma[i])\n    r <- as.numeric(data$rf[i])\n    endt <- Time\n    data$CDS_model[i] <- CDS_0T(L_bar, D, lamda, S_0, S_t, sigma_St, r, R, 1/252, endt)\n    data$CDS_delta[i] <- CDS_Delta(L_bar, D, lamda, S_0, S_t, sigma_St, r, R, 1/252, endt)\n  }\n  \n  #return the result\n  return(data)\n}\n\n#test\nticker=\"APC\"\ndir=\"D:/Rdata/Stat_Arbi\" \nstartdate=\"2010-03-11\" \nenddate=\"2014-03-11\" \nL_bar=0.5\nlamda=0.3\nR=0.3\nTime=5\n\ntest_CDS_model <- CDS.model(ticker, dir, startdate, enddate, L_bar, lamda, R, Time)\nplot(test_CDS_model$CDS_model)\nwrite.csv(test_CDS_model, file=\"D:/Rdata/Stat_Arbi/test/test.csv\")\ndir_temp <- paste(\"D:/Rdata/Stat_Arbi/NEW data/\", ticker, \".csv\", sep=\"\")\nmarketcds <- read.csv(file = dir_temp)\nlibrary(quantmod)\nmarketcds <- as.xts(marketcds[,2], order.by = as.Date(marketcds[,1]))\nnames(marketcds) = \"MCDS\"\ndata_new <- merge(test_CDS_model, marketcds)\ndata_new <- data_new[!is.na(data_new$CDS_model)]\ndata_plot <- data_new[,c(6,8)]\nzoo.basket <- as.zoo(data_plot)\ntsRainbow <- rainbow(ncol(zoo.basket))\nplot(x = zoo.basket, ylab = \"CDS spread/bps\", main = \"CDS spread\",\n     col = tsRainbow, screens = 1)",
    "created" : 1444880855734.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2520093668",
    "id" : "2BC220D8",
    "lastKnownWriteTime" : 1444880952,
    "path" : "~/CreditGrade model for CDS pricing/CredieGrade Model.R",
    "project_path" : "CredieGrade Model.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}